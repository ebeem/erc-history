#+STARTUP: inlineimages
#+OPTIONS: toc:3 ^:nil

** ERC History

This package enhances Emacs's IRC client =ERC= by enabling it to retrieve chat history from channels. Note that chat logs must be archived and accessible online (currently, this package only supports HTTP access).

** Configuration

The primary configuration required is setting the variable =erc-history-sources=, which is a list of sources (HTTP links) and the channels they offer logs for.

The link can include wildcards that will be replaced when pulling chat logs:
- =#CHANNEL#=: The name of the currently viewed channel.
- =TIME=: Replaces all available time formats using Emacs Lisp's =format-time-string= function.

#+begin_src elisp
  (require 'erc-history)
  (setq erc-history-sources
    '(("http://localhost/grc-history/#CHANNEL#/%Y/%m/%d.txt"
      ("#erc-history" "#erc-history-1"))))
#+end_src

Most of the time, the available logs will need to be parsed. In such cases, you can provide a parser function for each source. If no parser function is provided, a default one will be used, though it may not work properly.

The 3rd element in the source list is the function that parses log messages. The =parser= will receive a line from the chat logs and is expected to return a list of three variables: (=MSG_TIME= =SENDER_NICK= =MSG_CONTENT=). Ensure that the time format is in Emacs Lisp's time format. Use =encode-time= when needed, and convert the =timezone= as necessary. The default parser is =erc-history-common-message-parser=.

#+begin_src elisp
  (defun erc-history-myhost-message-parser (msg)
    "Display MSG in its erc bubber named CHANNEL.
  MSG must match the format described for erc messages."
    (message "custom message parsing: %s" msg)
    (let ((msg-parts (string-split msg " ")))
      ;; time
      (list
      (encode-time (parse-time-string
                    (concat (string-replace
                              " " "T" (substring msg 0 19)) "+0000")))
      ;; nickname
      (substring (nth 3 msg-parts) 0
                  (- (length (nth 3 msg-parts)) 1))
      ;; message content
      (mapconcat 'identity (cl-subseq msg-parts 4) " "))))

  (setq erc-history-sources
      '(("http://myhost/grc-history/#CHANNEL#/%Y/%m/%d.txt"
          ("#systemcrafters" "#erc-history")
          erc-history-myhost-message-parser)))
#+end_src


The configured channels' logs will automatically be retrieved when you navigate to the beginning of their buffers.

Note: Make sure you enable =erc-history-mode=.

*** Elpaca Configuration
In case you use a flexible package manager, you can just link this repo.

#+begin_src elisp
(use-package erc-history
  :after erc
  :elpaca (:host github :repo "ebeem/erc-history")
  :hook (erc-mode . erc-history-mode)
  :init
  (setq erc-history-sources
    '(("http://localhost/grc-history/#CHANNEL#/%Y/%m/%d.txt"
      ("#erc-history" "#erc-history-1")))))
#+end_src

** Preview

#+ATTR_ORG: :width 800
[[./preview.gif]]

